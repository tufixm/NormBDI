<?xml version="1.0" encoding="UTF-8"?>
<!--
	<H3>Creature capability.</H3>
	Provides basic creature behaviour (looking/moving).
-->
<capability xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex
	                    http://jadex.sourceforge.net/jadex-bdi-2.3.xsd"
	package="jadex.bdi.examples.hunterprey_classic.creature.actsense"
	name="Creature">

	<imports>
		<import>jadex.bdi.examples.hunterprey_classic.*</import>
		<import>jadex.bridge.fipa.SFipa</import>
		<import>jadex.commons.SUtil</import>
	</imports>

	<capabilities>
		<capability name="procap" file="jadex.bdi.planlib.protocols.request.Request"/>
		<capability name="dfcap" file="jadex.bdi.planlib.df.DF"/>
	</capabilities>

	<beliefs>
		<!-- The environment. -->
		<belief name="environmentagent" class="jadex.bridge.IComponentIdentifier"/>

		<!-- The df to search for the environment. -->
		<belief name="df" class="jadex.bridge.IComponentIdentifier" exported="true">
		</belief>

		<!-- The current vision. -->
		<belief name="vision" class="Vision" exported="true"/>

		<!-- The known preys. -->
		<beliefset name="preys" class="Prey" exported="true"/>

		<!-- The known hunters. -->
		<beliefset name="hunters" class="Hunter" exported="true"/>

		<!-- The known obstacles. -->
		<beliefset name="obstacles" class="Obstacle" exported="true"/>

		<!-- The known food. -->
		<beliefset name="food" class="Food" exported="true"/>

		<!-- The agents vision of itself. -->
		<belief name="my_self" class="Creature" exported="true">
		</belief>
	</beliefs>

	<goals>
		<!-- Get vision goal. -->
		<achievegoal name="get_vision" exported="true">
			<parameter name="vision" class="Vision" direction="out"/>
		</achievegoal>

		<!-- Move goal. -->
		<achievegoal name="move" exported="true">
			<parameter name="direction" class="String"/>
		</achievegoal>

		<!-- Eat goal. -->
		<achievegoal name="eat" exported="true">
			<parameter name="object" class="WorldObject"/>
		</achievegoal>

		<!-- Maintain leasetime goal. -->
		<maintaingoal name="maintain_lease" recur="true" recurdelay="2000">
			<!-- Hack!!! Result required for getvision plan. todo: refactor -->
			<parameter name="result" class="Object" direction="out" />
			<maintaincondition language="jcl">
				$beliefbase.my_self.getLeaseticks()>10
				
				// ?rbel_myself	= (belief (element_has_model ?mbel_myself) (belief_has_fact ?myself)) 
				// ?mbel_myself	= (mbelief (melement_has_name "my_self"))
				// ?myself	= (Creature (leaseticks > 10)) 
			</maintaincondition>
		</maintaingoal>

		<achievegoalref name="df_search">
			<concrete ref="dfcap.df_search"/>
		</achievegoalref>

		<achievegoalref name="rp_initiate">
			<concrete ref="procap.rp_initiate"/>
		</achievegoalref>
	</goals>

	<plans>
		<!-- Handle a get vision goal. -->
		<plan name="getvision">
			<parameter name="vision" class="Vision" direction="out">
				<goalmapping ref="get_vision.vision"/>
				<goalmapping ref="maintain_lease.result"/>
			</parameter>
			<body class="GetVisionPlan"/>
			<trigger>
				<goal ref="get_vision"/>
				<goal ref="maintain_lease"/>
			</trigger>
		</plan>

		<!-- Handle a move goal. -->
		<plan name="move">
			<parameter name="direction" class="String">
 				<goalmapping ref="move.direction"/>
			</parameter>
			<body class="MovePlan"/>
			<trigger>
				<goal ref="move"/>
			</trigger>
		</plan>

		<!-- Handle an eat goal. -->
		<plan name="eat">
			<parameter name="object" class="WorldObject">
 				<goalmapping ref="eat.object"/>
			</parameter>
			<body class="EatPlan"/>
			<trigger>
				<goal ref="eat"/>
			</trigger>
		</plan>

		<!-- Handle a new vision request. -->
		<plan name="updatevision">
			<body class="UpdateVisionPlan"/>
			<trigger>
				<messageevent ref="inform_vision"/>
			</trigger>
		</plan>
	</plans>

	<events>
		<messageevent name="inform_vision" type="fipa" direction="receive">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.JADEX_XML</value>
 			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>"HunterPreyOntology"</value>
 			</parameter>
 			<match>$content instanceof CurrentVision</match>
		</messageevent>

		<messageevent name="failure" type="fipa" direction="receive">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.FAILURE</value>
			</parameter>
<!--			<parameter name="language" class="String">
				<value>SFipa.JADEX_XML</value>
 			</parameter>
			<parameter name="content-class" class="Class" direction="fixed">
				<value>ContentElementList.class</value>
			</parameter>
-->		</messageevent>
	</events>

	<expressions>
		<!-- Query all objects from the beliefs that are currently in sight.-->
		<expression name="query_in_vision_objects">
			select WorldObject $object
			from SUtil.joinArbitraryArrays(new Object[]
 				{
 					$beliefbase.preys,
 					$beliefbase.hunters,
 					$beliefbase.obstacles,
 					$beliefbase.food
				})
			where $beliefbase.my_self.isInVisionRange($object.getLocation())
		</expression>
	</expressions>
	
	<configurations>
		<configuration name="default">
			<goals>
				<initialgoal ref="maintain_lease"/>
			</goals>
 		</configuration>
	</configurations>

</capability>

