<?xml version="1.0" encoding="UTF-8"?>
<!--
	<H3>The blackjack player agent.</H3>

	Player agents are supplied with a game
	strategy and will play with an initial
	amount of money (default is 100 credits).
-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex
	                    http://jadex.sourceforge.net/jadex-bdi-2.3.xsd"
	   name="Player"
	   package="jadex.bdi.examples.blackjack.player">

	<imports>
		<import>jadex.bdi.examples.blackjack.*</import>
		<import>jadex.bdi.examples.blackjack.player.strategies.*</import>
		<import>java.awt.Color</import>
		<import>jadex.commons.*</import>
		<import>jadex.commons.future.*</import>
		<import>java.util.logging.*</import>
		<import>jadex.bridge.fipa.*</import>
		<import>jadex.rules.rulesystem.rules.functions.*</import>
	</imports>

	<capabilities>
		<!-- this capability provides easy access to "out-of-the-box"-plans
			 allowing - for example - to register at the DF. -->
		<capability name="dfcap" file="jadex.bdi.planlib.df.DF"/>
	</capabilities>

	<beliefs>
		<!-- The player's knowledge about itself, encapsulated as player object. -->
		<belief name="myself" class="Player" exported="true">
			<!-- Create deafult player object, when not passed as argument. -->
			<fact>
 				new Player($scope.getAgentName(), 100, Color.CYAN,
 				AbstractStrategy.CONSTANT_VERY_CAREFUL)
			</fact>
		</belief>

		<!-- The dealer where this player is currently playing. -->
		<belief name="dealer" class="jadex.bridge.IComponentIdentifier" exported="true"/>

		<!-- The timeout used by the player. -->
		<belief name="timeout" class="long"/>

		<belief name="gamestate" class="GameState">
			<fact>new GameState()</fact>
		</belief>

		<!-- The human player interface. -->
		<belief name="gui" class="HumanPlayerInterface">
		 	<fact>
				$beliefbase.myself.getStrategyName().equals(AbstractStrategy.HUMAN_PLAYER)
 				? new jadex.commons.gui.GuiCreator(HumanPlayerInterface.class, new Class[]{Player.class, GameState.class, jadex.bdi.runtime.IBDIExternalAccess.class}, 
				new Object[]{$beliefbase.myself, $beliefbase.gamestate, $scope.getExternalAccess()})
 				: null
		 	</fact>
		</belief>		
	</beliefs>

	<goals>
		<!-- Main goal of the player is to play games at a dealer. -->
		<maintaingoal name="know_dealer" recur="true" recurdelay="2000">
			<maintaincondition language="jcl">
				$beliefbase.dealer!=null
				
				// ?rbelief = (belief (element_has_model.melement_has_name "dealer") (belief_has_fact != null))
			</maintaincondition>
		</maintaingoal>

		<achievegoal name="start_playing">
			<creationcondition language="jcl">
				$beliefbase.dealer!=null
				
				// ?rbelief = (belief (element_has_model.melement_has_name "dealer") (belief_has_fact != null))
			</creationcondition>
			<contextcondition language="jcl">
				$beliefbase.myself.getAccount()>0
				
				// ?myself = (Player (account > 0))
				// ?rbelief = (belief (element_has_model.melement_has_name "myself") (belief_has_fact ?myself))
			</contextcondition>
			<targetcondition language="jcl">
				$beliefbase.myself.getState().equals(Player.STATE_IDLE)
				
				// ?myself = (Player (playingstate "idle"))
				// ?rbelief = (belief (element_has_model.melement_has_name "myself") (belief_has_fact != null))
			</targetcondition>
		</achievegoal>

		<!-- Used to search for the dealer. -->
		<achievegoalref name="df_search">
			<concrete ref="dfcap.df_search"/>
		</achievegoalref>
	</goals>

	<plans>
		<!-- Plan to search for dealer and join a game. -->
		<plan name="search_dealer_plan">
			<body class="PlayerSearchDealerPlan" />
			<trigger>
				<goal ref="know_dealer"/>
			</trigger>
		</plan>

		<!-- Plan to search for dealer and join a game. -->
		<plan name="join_game_plan">
			<body class="PlayerJoinGamePlan" />
			<trigger>
				<goal ref="start_playing"/>
			</trigger>
			<precondition>$beliefbase.dealer!=null</precondition>
		</plan>

		<!-- Plan to play a single game. -->
		<plan name="play_game_round_plan">
			<body class="PlayerPlayGameRoundPlan" />
			<trigger>
				<messageevent ref="request_bet"/>
			</trigger>
			<precondition> $event.sender.equals($beliefbase.dealer)
				&amp;&amp; $beliefbase.myself.getAccount()>0</precondition>
		</plan>

		<!-- Plan to decline a game (only used when play_game_round_plan does not apply). -->
		<plan name="decline_game_plan">
			<body class="PlayerDeclineGamePlan" />
			<trigger>
				<messageevent ref="request_bet"/>
			</trigger>
		</plan>

		<plan name="update_game_state_plan">
			<parameter name="gamestate" class="GameState">
				<messageeventmapping ref="inform_game_state.content"/>
			</parameter>
			<body class="UpdateGameStatePlan" />
			<trigger>
				<messageevent ref="inform_game_state"/>
			</trigger>
		</plan>

	</plans>

	<events>
		<!-- Dealer queries for players bet. -->
		<messageevent name="request_bet" direction="receive" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.JADEX_XML</value>
 			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>BlackjackOntology.ONTOLOGY_NAME</value>
 			</parameter>
 			<match>$content instanceof RequestBet</match>
		</messageevent>

		<messageevent name="inform_game_state" direction="receive" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.JADEX_XML</value>
 			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>BlackjackOntology.ONTOLOGY_NAME</value>
 			</parameter>
 			<match>$content instanceof GameState</match>
		</messageevent>

		<!-- Dealer informs about result of the game (e.g. amount of money won). -->
		<messageevent name="action_done" direction="receive" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.JADEX_XML</value>
 			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>BlackjackOntology.ONTOLOGY_NAME</value>
 			</parameter>
 			<match>$content instanceof Done</match>
		</messageevent>

		<!-- sent messages -->

		<!-- Inform dealer about player bet. -->
		<messageevent name="inform_bet" direction="send" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.JADEX_XML</value>
 			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>BlackjackOntology.ONTOLOGY_NAME</value>
 			</parameter>
			<!-- Initialized with unique random value. -->
			<!--<parameter name="reply_with" class="String">
				<value>SFipa.createUniqueId($scope.getAgentName())</value>
			</parameter>-->
			<match>$content instanceof Done</match>
		</messageevent>

		<messageevent name="refuse_bet" direction="send" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REFUSE</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.JADEX_XML</value>
 			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>BlackjackOntology.ONTOLOGY_NAME</value>
 			</parameter>
			<!-- Initialized with unique random value. -->
			<!--<parameter name="reply_with" class="String">
				<value>SFipa.createUniqueId($scope.getAgentName())</value>
			</parameter>-->
			<match>$content instanceof RequestBet</match>
		</messageevent>

		<!-- Reuqest anothe rcard. -->
		<messageevent name="request_draw" direction="send" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.JADEX_XML</value>
 			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>BlackjackOntology.ONTOLOGY_NAME</value>
 			</parameter>
 			<match>$content instanceof RequestDraw</match>
			<!-- Initialized with unique random value. -->
			<!--<parameter name="reply_with" class="String">
				<value>SFipa.createUniqueId($scope.getAgentName())</value>
			</parameter>-->
		</messageevent>

		<!-- Request the game result. -->
		<messageevent name="request_finished" direction="send" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.JADEX_XML</value>
 			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>BlackjackOntology.ONTOLOGY_NAME</value>
 			</parameter>
			<!-- Initialized with unique random value. -->
			<!--<parameter name="reply_with" class="String">
				<value>SFipa.createUniqueId($scope.getAgentName())</value>
			</parameter>-->
			<match>$content instanceof RequestFinished</match>
		</messageevent>

		<messageevent name="request_join" direction="send" type="fipa">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.JADEX_XML</value>
 			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>BlackjackOntology.ONTOLOGY_NAME</value>
 			</parameter>
			<!-- Initialized with unique random value. -->
			<parameter name="reply_with" class="String">
				<value>SFipa.createUniqueId($scope.getAgentName())</value>
			</parameter>
			<match>$content instanceof RequestJoin</match>
		</messageevent>

	</events>

	<expressions>
		<condition name="start_playing" language="jcl">
			$beliefbase.myself.getCards().length==2 &amp;&amp; $beliefbase.gamestate!=null
			&amp;&amp; $beliefbase.gamestate.getDealer().getCards().length==1
		
			// ?player = (Player (cardCnt 2))
			// ?rbelief = (belief (element_has_model.melement_has_name "myself") (belief_has_fact ?player))

			// ?rbelief2 = (belief (element_has_model.melement_has_name "gamestate") (belief_has_fact ?gamestate))
			// ?gamestate = (GameState (dealer ?dealer &amp; 
			// 	:(== 1 (MethodCallFunction "Player" "getCardCnt" ?dealer))))
		</condition>
	</expressions>

	<!--
	     logging-properties, needed to debug the application.
	     Start the Jadex-Logging-Agent to see whats going on behind
	     the scenes
	 -->
	<properties>
		<!-- <property name="logging.level">Level.INFO</property> -->
		<property name="debugging">false</property>
	</properties>

	<configurations>
		<configuration name="default">
			<!-- <beliefs>
				<initialbelief ref="gui">
					<fact>
						$beliefbase.myself.getStrategyName().equals(AbstractStrategy.HUMAN_PLAYER)
						? new HumanPlayerInterface($beliefbase.myself, $beliefbase.gamestate, $agent.getExternalAccess())
		 				: null
		 			</fact>
				</initialbelief>
			</beliefs> -->
			<goals>
				<initialgoal ref="know_dealer" />
			</goals>
		</configuration>
	</configurations>

</agent>

