<?xml version="1.0" encoding="UTF-8"?>
<!--
  <H3>Garbage collector agent.</H3>

  Runs a predefined way on the grid and searches for
  garbage. Whenever it sees garbage at its actual position
  it tries to pick it up and brings it to one of the available
  garbage burners (chosen randomly).
-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex
	                    http://jadex.sourceforge.net/jadex-bdi-2.3.xsd"
	name="GarbageCollector"
	package="jadex.bdi.examples.garbagecollector_classic">

	<beliefs>
		<!-- Environment object as singleton.
 			Parameters are name and type of agent for adding it
			No clean solution but avoids registering of agents.-->
		<belief name="env" class="Environment">
			<fact>Environment.getInstance(Environment.COLLECTOR, $scope.getAgentName())</fact>
 		</belief>

		<!-- The actual position on the grid world. -->
		<belief name="pos" class="Position" evaluationmode="push">
			<fact language="jcl">
				$beliefbase.env.getPosition($scope.getAgentName())
			</fact>
 		</belief>

		<!-- When at least one piece of waste is present on the
			current posistion the actual position is perceived as dirty. -->
		<belief name="is_dirty" class="boolean" evaluationmode="push">
 			<fact language="jcl">
 				// ((Environment)$beliefbase.getBelief("env").getFact()).isDirty((Position)$beliefbase.getBelief("pos").getFact())
 				$beliefbase.env.isDirty($beliefbase.pos)
 			</fact>
		</belief>
		
		<!-- Flag indicating if the agent currently carries garbage. -->
		<belief name="has_garbage" class="boolean" evaluationmode="push">
 			<fact language="jcl">
 				$beliefbase.env.hasGarbage($scope.getAgentName())
			</fact>
		</belief>
	</beliefs>

	<goals>

		<!-- Goal for picking up a piece of waste, bringing it
			to some burner and going back. A new goal is created
 			whenever the actual position is dirty and there is no
 			burner present. -->
		 <achievegoal name="take">
			<unique/>
			<creationcondition language="jcl">
				$beliefbase.is_dirty &amp;&amp; !$beliefbase.env.isBurnerPresent($beliefbase.pos)

				// // unique (?rcapa and ?mgoal are provided internally)
				// (not (and
				// 	?adopted	= (goal (element_has_model ?mgoal))
				// 	?rcapa		= (capability (capability_has_goals contains ?adopted))
				// ))
				// 
				// ?rbelief = (belief (element_has_model ?mbelief) (belief_has_fact true))
				// ?mbelief = (mbelief (melement_has_name "is_dirty"))
 				// (not (and
				// 	?rbel_pos = (belief (element_has_model ?mbel_pos) (belief_has_fact ?pos))
				// 	?mbel_pos = (mbelief (melement_has_name "pos"))
				// 	?rbel_env = (belief (element_has_model ?mbel_env) (belief_has_fact ?env))
				// 	?mbel_env = (mbelief (melement_has_name "env"))
				// 	?env	= (Environment (isBurnerPresent (?pos) true))
				// ))
			</creationcondition>
			<deliberation>
				<inhibits ref="check"/>
			</deliberation>
		</achievegoal>

		<!-- Goal for running around on the grid and
			searching for garbage. -->
		<performgoal name="check" exclude="never"/>

		<!-- Goal for going to a specified position. -->
		<achievegoal name="go">
			<parameter name="pos" class="Position"/>
		</achievegoal>

		<!-- The goal for picking up waste. Tries endlessly to pick up. -->
		<achievegoal name="pick" exclude="never" retrydelay="100">
 			<dropcondition language="jcl">
 				!$beliefbase.is_dirty &amp;&amp; !$beliefbase.has_garbage
				
				// ?rbelief = (belief (element_has_model ?mbelief) (belief_has_fact false))
				// ?mbelief = (mbelief (melement_has_name "is_dirty"))
				// ?rbelief2 = (belief (element_has_model ?mbelief2) (belief_has_fact false))
				// ?mbelief2 = (mbelief (melement_has_name "has_garbage"))
 			</dropcondition>
		</achievegoal>
	</goals>

	<plans>
		<!-- Plan for taking some waste, bringing it to a burner
			and going back. -->
		<plan name="take_plan">
			<body class="TakePlan"/>
			<trigger>
				<goal ref="take"/>
			</trigger>
		</plan>

		<!-- Plan for running on a predefined route and searching waste. -->
		<plan name="checking_plan">
			<body class="CheckingPlan"/>
			<trigger>
				<goal ref="check"/>
			</trigger>
		</plan>

		<!-- Plan for picking up some garbage. -->
		<plan name="pickup_plan">
			<body class="PickUpPlan"/>
			<trigger>
				<goal ref="pick"/>
			</trigger>
		</plan>

		<!-- Plan for going to a target position. -->
		<plan name="go_plan">
			<parameter name="pos" class="Position">
 				<goalmapping ref="go.pos"/>
			</parameter>
			<body class="GoPlan"/>
			<trigger>
				<goal ref="go"/>
			</trigger>
		</plan>
	</plans>

	<properties>
		<!-- The environment may throw exceptions when executing property listeners
			and these listeners are not valid any longer. This leads to normal plan
			failure and can therefore be ignored. -->
		<property name="logging.level">java.util.logging.Level.OFF</property>
		<property name="debugging">false</property>
    </properties>

	<configurations>
		<configuration name="default">
			<goals>
				<!-- Initial goal for searching for garbage. -->
				<initialgoal ref="check"/>			
			</goals>
		</configuration>
	</configurations>

</agent>