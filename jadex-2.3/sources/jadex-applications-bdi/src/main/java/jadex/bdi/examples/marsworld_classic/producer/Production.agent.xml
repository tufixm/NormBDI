<?xml version="1.0" encoding="UTF-8"?>
<!--
	<H3>Production agent for producing ore.</H3>

	This Agent is called to move to an Location to produce ore there.
	Therefore it is registering it's production-servivce at the DF.
-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex
	                    http://jadex.sourceforge.net/jadex-bdi-2.3.xsd"
	name="Production"
	package="jadex.bdi.examples.marsworld_classic.producer">

	<imports>
		<import>jadex.bdi.examples.marsworld_classic.movement.*</import>
		<import>jadex.bdi.examples.marsworld_classic.*</import>
		<import>jadex.bridge.fipa.*</import>
		<import>jadex.commons.*</import>
		<import>jadex.commons.future.*</import>
		<import>jadex.bridge.service.*</import>
		<import>jadex.bridge.service.types.df.*</import>
		<import>jadex.bridge.service.search.*</import>
	</imports>

	<capabilities>
		<!-- Include the df capability as dfcap for finding other agents
			and registering the production service. -->
		<capability name="dfcap" file="jadex.bdi.planlib.df.DF"/>
		<!-- Include the move capability as move for basic movement. -->
		<capability name="move" file="jadex.bdi.examples.marsworld_classic.movement.Movement" />
	</capabilities>

	<beliefs>
		<!-- The targets sent to the sentries. -->
		<beliefset name="finished_targets" class="Target"/>
		
		<beliefref name="missionend">
			<concrete ref="move.missionend"/>
		</beliefref>
	</beliefs>

	<goals>
		<!-- Produce ore at a target. -->
		<achievegoal name="produce_ore">
			<parameter name="target" class="Target"/>
			<dropcondition language="jcl">
				$beliefbase.missionend
				// (belief (element_has_model.melement_has_name "missionend") (belief_has_fact true))
			</dropcondition>
			<deliberation>
				<inhibits cref="move.walk_around"/>
			</deliberation>
		</achievegoal>
	</goals>

	<plans>
		<!-- The main plan handling action requests. -->
		<plan name="produce">
			<body class="ProductionPlan"/>
			<waitqueue>
				<messageevent ref="request_production"/>
			</waitqueue>
		</plan>

		<!-- Produce ore at a target. -->
		<plan name="produce_ore">
			<parameter name="target" class="Target">
				<goalmapping ref="produce_ore.target"/>
			</parameter>
			<body class="ProduceOrePlan"/>
			<trigger>
				<goal ref="produce_ore"/>
			</trigger>
		</plan>

		<!-- Inform sentries about new targets. -->
		<plan name="informer">
			<body class="InformNewTargetPlan"/>
			<!-- Inform whenever a new fact is added to the belief set my_targets. -->
			<trigger>
				<factadded cref="move.my_targets"/>
			</trigger>
		</plan>
	</plans>

	<events>
		<!-- Message event for produce ore task allocation. -->
		<messageevent name="request_production" type="fipa" direction="receive">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>MarsOntology.ONTOLOGY_NAME</value>
			</parameter>
			<match>$content instanceof RequestProduction</match>
		</messageevent>

		<messageevent name="inform_target" type="fipa" direction="send">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.JADEX_XML</value>
 			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>MarsOntology.ONTOLOGY_NAME</value>
			</parameter>
		</messageevent>

		<messageevent name="request_carries" type="fipa" direction="send">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.REQUEST</value>
			</parameter>
			<parameter name="language" class="String" direction="fixed">
				<value>SFipa.JADEX_XML</value>
 			</parameter>
			<parameter name="ontology" class="String" direction="fixed">
				<value>MarsOntology.ONTOLOGY_NAME</value>
			</parameter>
		</messageevent>
	</events>

	<properties>
		<property name="logging.level">java.util.logging.Level.SEVERE</property>
		<property name="debugging">false</property>
	 	<property name="dfservice" class="IFuture">SServiceProvider.getService($scope.getServiceProvider(), IDF.class, RequiredServiceInfo.SCOPE_PLATFORM)</property>
	</properties>

	<configurations>
		<configuration name="default">
			<beliefs>
				<initialbelief cref="move.my_type">
					<fact>Environment.PRODUCTION_AGENT</fact>
				</initialbelief>
				<initialbelief cref="move.my_speed">
					<fact>10.0</fact>
				</initialbelief>
				<initialbelief cref="move.my_vision">
					<fact>0.05</fact>
				</initialbelief>
			</beliefs>
			<goals>
				<!-- Create a goal for registering at the df. -->
				<initialgoal cref="dfcap.df_register">
					<parameter ref="description">
						<value>
							$properties.dfservice.createDFComponentDescription(null, 
								$properties.dfservice.createDFServiceDescription("service_produce", "service_produce", "University of Hamburg"))
						</value>
					</parameter>
				</initialgoal>
				<!-- Create a goal for walking around. -->
				<initialgoal cref="move.walk_around"/>
				<!-- Create a goal for watching for targets. -->
				<initialgoal cref="move.watch_targets"/>
				<endgoal cref="dfcap.df_deregister"/>
			</goals>
			<plans>
				<initialplan ref="produce"/>
			</plans>
		</configuration>
		
	</configurations>

</agent>
