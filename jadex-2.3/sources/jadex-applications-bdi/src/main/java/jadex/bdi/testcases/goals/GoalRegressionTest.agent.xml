<?xml version="1.0" encoding="UTF-8"?>
<!--
	<H3>Test different behaviours of goals.</H3>
<pre>
<font face="Arial, Helvetica, sans-serif">
	This agent tests several goals and checks for correct results
	using the GoalRegressionTestPlan.

	The agent has some initial goals, which
	specify the expected result state, and the
	result states of all executed plans (process goals).
	The GoalRegressionTestPlan reads this information
	and checks, wether the actual goal history of a finished goal
	matches the expected result.

	The following tests are performed (see initial goals):
	testachievesuccess:	Processing an achieve goal should stop when one plan
		finishes successfully.
	testpriority:	Plan with higher priority should be selected first
		(first plan fails, second succeeds).
	testperformsuccess:	Perform goal should continue after
		one plan has succeeded (last process states will also be SUCCEEDED).
	testperformfailure:	Perform goal should fail when no plan is applicable.
	testbinding:	Two plans with different final state should be executed
		according to the binding expression of the MPlan (see bindplan).
</font>
</pre>
-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex
	                    http://jadex.sourceforge.net/jadex-bdi-2.3.xsd"
	name="GoalRegressionTest"
	package="jadex.bdi.testcases.goals">

	<imports>
		<import>jadex.bdi.testcases.*</import>
	</imports>

	<capabilities>
		<capability name="testcap" file="jadex.bdi.planlib.test.Test"/>
	</capabilities>

	<beliefs>
		<beliefref name="timeout"  exported="true">
			<concrete ref="testcap.timeout"/>
		</beliefref>
		<beliefref name="testresults"  result="true">
			<concrete ref="testcap.testresults"/>
		</beliefref>
	</beliefs>

	<goals>
		<achievegoal name="testachievesuccess">
			<parameter name="test_state" class="boolean" direction="inout"/>
			<parameter name="test_process_states" class="boolean[]" direction="inout"/>
		</achievegoal>
		
		<achievegoal name="testpriority">
			<parameter name="test_state" class="boolean" direction="inout"/>
			<parameter name="test_process_states" class="boolean[]" direction="inout"/>
		</achievegoal>
		
		<performgoal name="testperformsuccess">
			<parameter name="test_state" class="boolean" direction="inout"/>
			<parameter name="test_process_states" class="boolean[]" direction="inout"/>
		</performgoal>
		
		<performgoal name="testperformfailure" retry="true">
			<parameter name="test_state" class="boolean" direction="inout"/>
			<parameter name="test_process_states" class="boolean[]" direction="inout"/>
		</performgoal>
		
		<achievegoal name="testbinding">
			<parameter name="test_state" class="boolean" direction="inout"/>
			<parameter name="test_process_states" class="boolean[]" direction="inout"/>
		</achievegoal>
	</goals>
	
	<plans>
		<plan name="regtest">
			<body class="GoalRegressionTestPlan"/>
			<trigger>
				<!-- <filter>new GoalEventFilter(null, true)</filter> -->
				<goalfinished ref="testachievesuccess"/>
				<goalfinished ref="testpriority"/>
				<goalfinished ref="testperformsuccess"/>
				<goalfinished ref="testperformfailure"/>
				<goalfinished ref="testbinding"/>
			</trigger>
		</plan>
		
		<plan name="one"  priority="0">
			<parameter name="wait" class="long">
				<value>50L</value>
			</parameter>
			<body class="ResultPlan"/>
			<trigger>
				<goal ref="testachievesuccess"/>
				<goal ref="testperformsuccess"/>
				<goal ref="testpriority"/>
			</trigger>
		</plan>
		
		<plan name="two" priority="1">
			<parameter name="wait" class="long">
				<value>250L</value>
			</parameter>
			<parameter name="success" class="boolean">
				<value>false</value>
			</parameter>
			<body class="ResultPlan"/>
			<trigger>
				<goal ref="testachievesuccess"/>
				<goal ref="testperformsuccess"/>
				<goal ref="testpriority"/>
			</trigger>
		</plan>
		
		<plan name="three" priority="0">
			<parameter name="wait" class="long">
				<value>500L</value>
			</parameter>
			<body class="ResultPlan"/>
			<trigger>
				<goal ref="testachievesuccess"/>
				<goal ref="testperformsuccess"/>
				<goal ref="testpriority"/>
			</trigger>
		</plan>
		
		<plan name="bindplan" priority="0">
			<parameter name="targetstate" class="boolean">
				<bindingoptions>new boolean[]{false, true}</bindingoptions>
			</parameter>
			<parameter name="wait" class="long">
				<value>500L</value>
			</parameter>
			<parameter name="success" class="boolean">
				<value>$plan.targetstate</value>
			</parameter>
			<body class="ResultPlan"/>
			<trigger>
				<goal ref="testbinding"/>
			</trigger>
		</plan>
	</plans>
	
	<properties>
		<property name="logging.level">java.util.logging.Level.SEVERE</property>
		<property name="debugging">false</property>
	</properties>

	<configurations>
		<configuration name="default">
			<beliefs>
				<initialbelief cref="testcap.testcase_cnt">
					<fact>5</fact>
				</initialbelief>
			</beliefs>
			<goals>
				<initialgoal ref="testachievesuccess">
					<parameter ref="test_state">
						<value>true</value>
					</parameter>
					<parameter ref="test_process_states">
						<value>new boolean[]{false, true}</value>
					</parameter>
				</initialgoal>
				<initialgoal ref="testpriority">
					<parameter ref="test_state">
						<value>true</value>
					</parameter>
					<parameter ref="test_process_states">
						<value>new boolean[]{false, true}</value>
					</parameter>
				</initialgoal>
				<initialgoal ref="testperformsuccess">
					<parameter ref="test_state">
						<value>true</value>
					</parameter>
					<parameter ref="test_process_states">
						<value>new boolean[]{false, true, true}</value>
					</parameter>
				</initialgoal>
				<initialgoal ref="testperformfailure">
					<parameter ref="test_state">
						<value>false</value>
					</parameter>
					<parameter ref="test_process_states">
						<value>new boolean[0]</value>
					</parameter>
				</initialgoal>
				<initialgoal ref="testbinding">
					<parameter ref="test_state">
						<value>true</value>
					</parameter>
					<parameter ref="test_process_states">
						<value>new boolean[]{false, true}</value>
					</parameter>
				</initialgoal>
			</goals>
		</configuration>
	</configurations>

</agent>

