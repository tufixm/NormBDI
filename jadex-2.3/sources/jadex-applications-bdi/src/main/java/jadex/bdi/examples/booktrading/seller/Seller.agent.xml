<?xml version="1.0" encoding="UTF-8"?>
<!--
	<H3>The seller agent sells books for its user.</H3>

	The seller agent comes with a user interface in which the
	human user can enter its sell book orders consisting of
	a title, start price, price limit and a deadline. The agent
	subsequently tries to sell the book and changes the price
	according to the deadline.
-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex
	                    http://jadex.sourceforge.net/jadex-bdi-2.3.xsd"
	   name="Seller" package="jadex.bdi.examples.booktrading.seller">

	<imports>
		<import>jadex.bdi.examples.booktrading.common.*</import>
		<import>jadex.bridge.fipa.*</import>
		<import>java.util.*</import>
		<import>jadex.bridge.service.types.df.*</import>
		<import>jadex.rules.rulesystem.rules.functions.*</import>
		<import>jadex.bdi.runtime.*</import>
		<import>jadex.commons.*</import>
		<import>jadex.commons.future.*</import>
		<import>jadex.bridge.service.*</import>
		<import>jadex.bridge.service.search.*</import>
		<import>jadex.bridge.service.types.clock.*</import>
	</imports>
		
	<capabilities>
		<capability name="procap" file="jadex.bdi.planlib.protocols.contractnet.ContractNet"/>
		<capability name="dfcap" file="jadex.bdi.planlib.df.DF"/>
	</capabilities>

	<beliefs>
		<beliefset name="orders" class="Order" evaluationmode="push">
			<facts language="jcl">	
				collect(
					Order $order &amp;&amp;
					IGoal $g &amp;&amp; $g.getModelElement().getName().equals("sell_book") &amp;&amp;
					$goalbase.containsGoal($g) &amp;&amp;
					$g.getParameter("order").getValue()==$order
				)
			</facts>
		</beliefset>
	
		<belief name="time" class="long" updaterate="1000">
			<fact>$scope.getTime()</fact>
		</belief>
		
		<beliefset name="initial_orders" class="Order" exported="true"/>
		
		<beliefset name="negotiation_reports" class="NegotiationReport"/>
		
		<belief name="gui" class="jadex.commons.gui.GuiCreator"/>
		
		<beliefref name="cnp_filter">
			<concrete ref="procap.cnp_filter"/>
		</beliefref>
	</beliefs>

	<goals>
		<achievegoal name="sell_book" recur="true" recurdelay="10000000">
			<parameter name="order" class="Order">
				<value>$order</value>
			</parameter>
			<unique/>
			<creationcondition language="jcl">
				Order $order &amp;&amp; $order.getState()==Order.OPEN
			</creationcondition>
			<dropcondition language="jcl">
				$goal.order.getState().equals(Order.FAILED)
			</dropcondition>
			<targetcondition language="jcl">
				Order.DONE.equals($goal.order.getState())
			</targetcondition>
		</achievegoal>
		
		<querygoalref name="cnp_make_proposal">
			<concrete ref="procap.cnp_make_proposal"/>
		</querygoalref>
		
		<achievegoalref name="cnp_execute_task">
			<concrete ref="procap.cnp_execute_task"/>
		</achievegoalref>
		
		<achievegoalref name="df_register">
			<concrete ref="dfcap.df_register"/>
		</achievegoalref>
		
		<achievegoalref name="df_deregister">
			<concrete ref="dfcap.df_deregister"/>
		</achievegoalref>
	</goals>

	<plans>
		<plan name="make_proposal">
			<parameter name="cfp" class="Object">
				<goalmapping ref="cnp_make_proposal.cfp"/>
			</parameter>
			<parameter name="proposal" class="Object" direction="out">
				<goalmapping ref="cnp_make_proposal.proposal"/>
			</parameter>
			<parameter name="proposal_info" class="Order" direction="out">
				<goalmapping ref="cnp_make_proposal.proposal_info"/>
			</parameter>
			<parameterset name="suitableorders" class="Order">
				<values>
					select Order $order from $beliefbase.orders
					where $order.getTitle().equals($plan.cfp) &amp;&amp;
					$order.getState().equals(Order.OPEN)
					order by ($beliefbase.time - $order.getStartTime()) /
					($order.getDeadline().getTime()-$order.getStartTime())
				</values>
			</parameterset>
			<body class="MakeProposalPlan" />
			<trigger>
				<goal ref="cnp_make_proposal"/>
			</trigger>
		</plan>
		
		<plan name="execute_order">
			<parameter name="proposal" class="Object">
				<goalmapping ref="cnp_execute_task.proposal"/>
			</parameter>
			<parameter name="proposal_info" class="Object">
				<goalmapping ref="cnp_execute_task.proposal_info"/>
			</parameter>
			<parameter name="result" class="Object" direction="out">
				<goalmapping ref="cnp_execute_task.result"/>
			</parameter>
			<body class="ExecuteOrderPlan" />
			<trigger>
				<goal ref="cnp_execute_task"/>
			</trigger>
		</plan>
	</plans>
	
	<expressions>
		<expression name="search_reports">
			select NegotiationReport $nr from $beliefbase.negotiation_reports
			where $nr.getOrder().equals($order)
			order by $nr.getTime()
			<!-- <parameter name="$order" class="Order"/> -->
		</expression>
	</expressions>

	<services>
		<requiredservice name="dfservice" class="IDF">
			<binding scope="platform"/>
		</requiredservice>
	</services>

	<properties>
		<!-- Seller generates warning about unhandled (passive) sell_book goals. -->
		<property name="logging.level">java.util.logging.Level.SEVERE</property>
		<property name="debugging">false</property>
	 	<property name="dfservice" class="IFuture">SServiceProvider.getService($scope.getServiceProvider(), IDF.class, RequiredServiceInfo.SCOPE_PLATFORM)</property>
		<property name="componentviewer.viewerclass">"jadex.bdi.examples.booktrading.common.GuiViewerPanel"</property>
	</properties>

	<configurations>
		<configuration name="default">
			<beliefs>
				<initialbelief ref="cnp_filter">
					<fact>jadex.commons.IFilter.ALWAYS</fact>
				</initialbelief>
				<initialbelief ref="gui">
					<fact>new jadex.commons.gui.GuiCreator(Gui.class, new Class[]{jadex.bdi.runtime.IBDIExternalAccess.class}, 
						new Object[]{$scope.getExternalAccess()})</fact>
				</initialbelief>
			</beliefs>
			<goals>
				<initialgoal ref="df_register">
					<parameter ref="description">
						<value>
							$properties.dfservice.createDFComponentDescription(null,
								$properties.dfservice.createDFServiceDescription("sell", "service_seller", "UniHH"))
						</value>
					</parameter>
				</initialgoal>
				<endgoal ref="df_deregister"/>
			</goals>
		</configuration>
	</configurations>

</agent>