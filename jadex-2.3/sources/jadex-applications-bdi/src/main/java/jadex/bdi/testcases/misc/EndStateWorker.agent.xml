<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	<H3>Check end state and report to test case agent</H3>
	Part of EndState test.
 -->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex
						http://jadex.sourceforge.net/jadex-bdi-2.3.xsd"
	name="EndStateWorker"
	package="jadex.bdi.testcases.misc">
	
	<imports>
		<import>jadex.bridge.fipa.*</import>
		<import>jadex.bridge.IComponentIdentifier</import>
		<import>jadex.base.test.TestReport</import>
		<import>jadex.bdi.testcases.ResultPlan</import>
		<import>java.util.*</import>
	</imports>
	
	<capabilities>
 		<capability name="endcap" file="jadex.bdi.testcases.misc.EndStateWorker"/>
	</capabilities>
	
	<beliefs>
		<belief name="testagent" class="IComponentIdentifier" exported="true"/>
		<belief name="trigger" class="boolean">
			<fact>false</fact>
		</belief>
		<beliefset name="reports" class="TestReport">
			<fact>new TestReport("end plan", "Test if end plan is executed")</fact>
			<fact>new TestReport("end goal", "Test if end goal is dispatched")</fact>
			<fact>new TestReport("end internal event", "Test if end internal event is dispatched")</fact>
			<fact>new TestReport("end message event", "Test if end message event is sent")</fact>
 			<fact>new TestReport("capability end goal", "Test if capability end goal is dispatched")</fact>
			<fact>new TestReport("capability end internal event", "Test if capability end internal event is dispatched")</fact>
			<fact>new TestReport("capability end message event", "Test if capability end message event is sent")</fact>
		</beliefset>
	</beliefs>
	
	<goals>
		<!-- A goal that should not be triggered in end state. -->
		<achievegoal name="testgoal">
			<creationcondition language="jcl">
				$beliefbase.trigger
				
				// ?rbel_trigger	= (belief (element_has_model ?mbel_trigger) (belief_has_fact true))
				// ?mbel_trigger	= (mbelief (melement_has_name "trigger"))
			</creationcondition>
		</achievegoal>
		<achievegoal name="endgoal">
			<parameter name="content" class="String">
				<value>"end goal"</value>
			</parameter>
		</achievegoal>
	</goals>
	
	<plans>
		<plan name="endstateworker_plan">
			<body class="EndStateWorkerPlan"/>
		</plan>
		<plan name="endstateinitiator_plan">
			<body class="EndStateInitiatorPlan"/>
		</plan>
		<plan name="dummy_plan">
			<parameter name="wait" class="long">
				<value>100L</value>
			</parameter>
			<body class="ResultPlan"/>
			<trigger>
				<condition language="jcl">
					$beliefbase.trigger
					
					// ?rbel_trigger	= (belief (element_has_model ?mbel_trigger) (belief_has_fact true))
					// ?mbel_trigger	= (mbelief (melement_has_name "trigger"))
				</condition>
				<goal ref="testgoal"/>
			</trigger>
		</plan>
		<plan name="endstateworkertest_plan">
			<parameter name="content" class="String">
				<internaleventmapping ref="endevent.content"/>
				<messageeventmapping ref="endmsg.content"/>
				<goalmapping ref="endgoal.content"/>
 				<internaleventmapping ref="endcap.endevent.content"/>
				<messageeventmapping ref="endcap.endmsg.content"/>
				<goalmapping ref="endcap.endgoal.content"/>
			</parameter>
			<body class="EndStateWorkerTestPlan"/>
			<trigger>
				<internalevent ref="endevent"/>
 				<internalevent cref="endcap.endevent"/>
				<messageevent ref="endmsg"/>
				<messageevent cref="endcap.endmsg"/>
				<goal ref="endgoal"/>
				<goal cref="endcap.endgoal"/>
		</trigger>
		</plan>
		<plan name="endstateworkertest_plan2">
			<parameter name="content" class="String"/>
			<body class="EndStateWorkerTestPlan"/>
		</plan>
	</plans>
	
	<events>
		<internalevent name="endevent">
			<parameter name="content" class="String">
				<value>"end internal event"</value>
			</parameter>
		</internalevent>
		<messageevent name="endmsg" type="fipa" direction="send_receive">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
			<parameter name="content" class="String" direction="fixed">
				<value>"end message event"</value>
			</parameter>
			<parameterset name="receivers" class="IComponentIdentifier">
				<value>$scope.getComponentIdentifier()</value>
			</parameterset>
		</messageevent>
		<messageevent name="inform_reports" type="fipa" direction="send">
			<parameter name="performative" class="String">
				<value>SFipa.INFORM</value>
			</parameter>
			<parameter name="language" class="String">
				<value>SFipa.JADEX_XML</value>
			</parameter>
			<parameterset name="receivers" class="IComponentIdentifier">
				<value>$beliefbase.testagent</value>
			</parameterset>
		</messageevent>
	</events>
	
	<expressions>
		<!-- Tests for end state elements are finished when all elements have
			 been triggered and therefore there is no more unsucceeded test. -->
		<condition name="end_tests_finished" language="jcl">
			//(select one TestReport $report from $beliefbase.reports
			//where !$report.isSucceeded())==null
			
			!(TestReport $report &amp;&amp; !$report.isSucceeded() &amp;&amp; Arrays.asList($beliefbase.reports).contains($report))
			
			// (not
			// 	(and
			// 		?report	= (TestReport (succeeded false) (reason null))
			// 		?rbelset_reports	= (beliefset (element_has_model ?mbelset_reports) (beliefset_has_facts contains ?report))
			// 		?mbelset_reports	= (mbeliefset (melement_has_name "reports"))
			// 	)
			// )
		</condition>
	</expressions>
	
	<properties>
		<property name="debugging">false</property>
	</properties>
	
	<configurations>
		<configuration name="default">
			<goals>
				<endgoal ref="endgoal"/>
 				<endgoal cref="endcap.endgoal"/>
			</goals>
			<plans>
				<initialplan ref="endstateworker_plan"/>
				<initialplan ref="endstateinitiator_plan"/>
				<endplan ref="endstateworkertest_plan2">
					<parameter ref="content">
						<value>"end plan"</value>
					</parameter>
				</endplan>
			</plans>
			<events>
				<endinternalevent ref="endevent"/>
				<endinternalevent cref="endcap.endevent"/>
				<endmessageevent ref="endmsg"/>
				<endmessageevent cref="endcap.endmsg"/>
			</events>
		</configuration>
	</configurations>
	
</agent>
