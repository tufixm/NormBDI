<?xml version="1.0" encoding="UTF-8"?>
<!--
	<H3>Agent for testing various waitFor methods.</H3>

	The agent has an initial plan which tests waitFor() from a plan.
	Tests also waitFor() from external thread.
-->
<agent xmlns="http://jadex.sourceforge.net/jadex"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://jadex.sourceforge.net/jadex
	                    http://jadex.sourceforge.net/jadex-bdi-2.3.xsd"
	name="WaitFor"
	package="jadex.bdi.testcases.misc">

	<imports>
		<import>jadex.bdi.testcases.AnswerPlan</import>
		<import>jadex.bdi.testcases.ResultPlan</import>
		<import>jadex.bridge.fipa.*</import>
	</imports>

	<capabilities>
		<!-- <capability name="ping" file="jadex.bdi.planlib.ping.Ping"/> -->
		<capability name="testcap" file="jadex.bdi.planlib.test.Test"/>
	</capabilities>

	<beliefs>
		<belief name="time" class="long" updaterate="100">
			<fact>$scope.getTime()</fact>
		</belief>
		<beliefset name="belset" class="Object">
		</beliefset>
		<beliefref name="timeout"  exported="true">
			<concrete ref="testcap.timeout"/>
		</beliefref>
		<beliefref name="testresults"  result="true">
			<concrete ref="testcap.testresults"/>
		</beliefref>
	</beliefs>

	<goals>
		<achievegoal name="test"></achievegoal>
	</goals>

	<plans>
		<plan name="waitfor_plan">
			<body class="WaitForPlan"/>
		</plan>
		<plan name="result_plan">
			<body class="ResultPlan"/>
			<trigger>
				<goal ref="test"/>
			</trigger>
		</plan>
		<plan name="adder">
			<parameter name="beliefsetname" class="String">
				<value>"belset"</value>
			</parameter>
			<parameter name="time" class="long">
				<value>1000L</value>
			</parameter>
			<body class="BeliefSetAddPlan"/>
		</plan>
		<plan name="remover">
			<parameter name="beliefsetname" class="String">
				<value>"belset"</value>
			</parameter>
			<parameter name="time" class="long">
				<value>1300L</value>
			</parameter>
			<body class="BeliefSetRemovePlan"/>
		</plan>
		
		<!-- This plan sends back an alive on a ping request. -->
		<plan name="answer_ping">
			<body class="AnswerPlan" />
			<trigger>
				<messageevent ref="default_query_ping"/>
			</trigger>
		</plan>
		<plan name="alive_plan">
			<body class="ResultPlan"/>
			<trigger>
				<messageevent ref="inform"/>
			</trigger>
		</plan>
		
	</plans>

	<events>
		<!-- todo: should use ping goal instead. -->
		<!-- <messageeventref name="default_query_ping">
			<concrete ref="ping.default_query_ping"/>
		</messageeventref>

		<messageeventref name="inform_alive">
			<concrete ref="ping.inform_alive"/>
		</messageeventref>-->
		
		<!-- Default query ping message events. -->
		<messageevent name="default_query_ping" type="fipa" exported="true" direction="send_receive">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.QUERY_REF</value>
			</parameter>
			<parameter name="reply_with" class="String">
				<value>SFipa.createUniqueId($scope.getAgentName())</value>
			</parameter>
			<parameter name="content" class="String" direction="fixed">
				<value>"ping"</value>
			</parameter>
		</messageevent>
		
		<!-- Ping queries are answered with an inform message. -->
		<messageevent name="inform" type="fipa" exported="true">
			<parameter name="performative" class="String" direction="fixed">
				<value>SFipa.INFORM</value>
			</parameter>
		</messageevent>
	</events>

	<properties>
		<!-- <property name="logging.level">java.util.logging.Level.INFO</property> -->
		<property name="debugging">false</property>
	</properties>

	<configurations>
		<configuration name="default">
			<beliefs>
				<initialbelief cref="testcap.testcase_cnt">
					<fact>7</fact>
				</initialbelief>
			</beliefs>
			<plans>
				<initialplan ref="waitfor_plan"/>
				<initialplan ref="adder"/>
				<initialplan ref="remover"/>
			</plans>
		</configuration>
	</configurations>

</agent>

